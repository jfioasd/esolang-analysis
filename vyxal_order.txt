302 
v (Vectorise)

281 
: (Duplicate)

278 
; (Close Structure)

269 
* (Multiplication / Arity Change)

246 
+ (Addition)

231 
? (Input)

224 
$ (Swap)

217 
∑ (Summate)

209 
ƛ (Lambda Map)

179 
f (Flatten)

161 
n (Context)

147 
› (Increment / Space Replace With 0)

142 
L (Length)

140 
( (Open For Loop)

134 
= (Equals)

126 
J (Merge)

126 
, (Print)

123 
' (Lambda Filter)

119 
h (Head)

118 
Ṙ (Reverse)

111 
- (Subtract)

111 
[ (Open If Statement)

109 
ṅ (Join By Nothing)

108 
⁰ (Very Last Input)

105 
t (Tail)

104 
‹ (Decrement)

104 
ɾ (Inclusive One Range)

102 
p (Prepend)

88 
d (Double / Dyadify)

87 
| (Branch In Structure)

82 
)

78 
C (Chr / Ord)

75 
/ (Divide / Split)

74 
¥ (Push Register)

74 
s (sort)

73 
÷ (Item Split)

71 
i (Index)

63 
½ (Halve)

63 
c (Contains / First Truthy Item Under Function Application)

63 
e (Exponentiation)

62 
ð (Space)

62 
λ (Lambda)

62 
% (Modulo / Format)

62 
Ḣ (Head Remove / Behead)

61 
" (Pair)

59 
U (Uniquify)

58 
⌊ (Floor)

57 
Ṅ (Integer partitions / First Truthy Non-Negative Integer)

57 
τ (From Base Ten / To Custom Base)

57 
A (All)

56 
꘍ (Bitwise Xor)

53 52 
Π (Product of Array / Cartesian product over list)

51 
Ẏ (Slice Until)

50 
£ (Set Register)

50 
N (Negate / Swap Case / First Integer Where Truthy)

50 
↔ (Combinations/Remove/Fixed Point Collection)

50 
⁋ (Join On Newlines)

50 
ẇ (Chunk Wrap)

49 
b (Binary)

49 
₀ (Ten)

48 
Ṫ (Tail Remove / Truthy Under)

48 
⇧ (Grade Up)

47 
ȯ (Slice)

46 
İ (Index into / Collect while unique / Complex Number)

46 
R (Reduce)

45 
² (Square)

45 
ε (Absolute Difference / Repeat / Regex match)

45 
l (Cumulative Groups / First Non-Negative Truthy Integers)

44 
℅ (Random Choice)

44 
¹ (Second Last Input)

44 
Ṗ (Permutations)

43 
Ṡ (Vectorised sums / Strip whitespace from both sides / Is positive)

43 
¯ (Deltas)

42 
I (Into Two Pieces)

42 
₴ (Print Without Newline)

42 
~ (Filter / Execute Without Pop)

41 
] (Close If Statement)

40 
₌ (Parallel Apply)

40 
≈ (All Equal)

40 
⌈ (Ceiling)

39 
W (Wrap)

39 
⁼ (Exactly Equal To)

38 
G (Max)

38 
¦ (Cumulative Sum)

38 
ʁ (Exclusive Zero Range)

38 
Ḃ (Bifurcate)

38 
¬ (Logical Not)

38 
g (Minimum)

38 
S (Stringify)

37 
‡ (Two Element Lambda)

37 
D (Triplicate)

36 
⁽ (One Element Lambda)

35 
{ (Open While Loop)

35 
Ẋ (Cartesian Product / Fixpoint)

35 
… (Print Without Popping)

35 
ẋ (Repeat)

35 
T (Truthy Indices / Triple / Triadify)

35 
Ḋ (Is Divisible / Arbitrary Duplicate / Ordered Group By)

35 
a (Any)

34 
K (Factors / Substrings / Prefixes)

34 
Ġ (Group consecutive)

34 
ḟ (Find)

33 
u (Minus One)

33 
∩ (Transpose)

32 
< (Less Than)

31 
₍ (Parallel Apply Wrap)

31 
× (Asterisk Literal)

31 
O (Count / Maximums-by)

31 
⇩ (Grade Down)

31 
> (Greater Than)

31 
ʀ (Inclusive Zero Range)

31 
≬ (Three Element Lambda)

31 
Ŀ (Transliterate)

30 
ḭ (Floor Division)

30 
ƒ (Reduce by)

30 
ẏ (Exclusive Range Length)

29 
₃ (Divisible By Three)

29 
y (Uninterleave)

29 
Ė (Vyxal Exec / Reciprocal)

29 
ȧ (Absolute value)

29 
µ (Sorting Lambda)

29 
V (Replace / Map to Indices)

28 
⅛ (Push To Global Array)

28 
E (Two Power / Python Eval)

28 
ż (Inclusive Range Length)

27 
w (Listify)

27 
Z (Zip)

26 
ṡ (Sort by Function)

26 
√ (Square Root)

26 
æ (Is Prime / Case Check)

26 
r (Range)

26 
• (MultiCommand)

25 
ḣ (Head Extract)

25 
∷ (Parity)

25 
ṗ (Powerset)

24 
≠ (Not Equal To)

24 
j (Join)

24 
ǐ (Prime factors)

23 
₁ (Hundred)

23 
∞ (Palindromise)

23 
o (Remove)

22 
_ (Pop)

22 
↵ (Split On newlines)

21 
ß (Conditional Execute)

21 
x (Recurse / Continue / Print Stack)

21 
ǔ (Rotate Right)

21 
β (To Base Ten / From Custom Base)

21 
↳ (Right Bit Shift)

20 
m (Mirror)

20 
ġ (Gcd / Group by Function)

20 
ɽ (Exclusive One Range / Lowercase)

20 
⌐ (Complement / Comma Split)

20 
¡ (Factorial)

20 
₂ (Is Even)

19 
∧ (Logical And)

19 
& (Apply To Register)

18 
Y (Interleave)

18 
€ (Split On / Fill By Coordinates)

18 
† (Function Call)

18 
F (Filter)

18 
¾ (Push Global Array)

17 
∨ (Logical Or)

17 
± (Sign)

17 
¤ (Empty String)

17 
Ḟ (Generator / Modulo Index / Format)

16 
B (Binary To Decimal)

16 
₄ (Twenty Six)

16 
Ǔ (Rotate Left)

15 
Ȧ (Assign)

15 
Ǐ (Prime factorization)

14 
₅ (Divisible By Five)

14 
∴ (Dyadic Maximum)

14 
q (Uneval)

14 
₇ (One Twenty Eight)

14 
ꜝ (Bitwise Not)

14 
Ǎ (Remove non-alphabets)

14 
ċ (Not One)

13 
∵ (Dyadic Minimum)

13 
^ (Reverse Stack)

13 
„ (Rotate Stack Left)

13 
ṁ (Mean)

13 
ǎ (Nth prime)

13 
↲ (Left Bit Shift)

12 
Ċ (Counts)

12 
ṫ (Tail Extract)

12 
≤ (Lesser Than or Equal To)

12 
¶ (Newline)

12 
ḋ (Divmod)

11 
₈ (Two Fifty Six)

11 
⟑ (Apply Lambda)

11 
M (Map Function)

11 
≥ (Greater Than or Equal To)

11 
! (Stack Length)

10 
H (Hex To Decimal)

10 
⋏ (Bitwise And)

10 
₆ (Sixty Four)

10 
‟ (Rotate Stack Right)

10 
⋎ (Bitwise Or)

9 
⊍ (Symmetric Set difference)

9 
ɖ (Scan by)

9 
∇ (Shift)

8 
} (Close While Loop)

7 
Ȯ (Over)

7 
Ǒ (Multiplicity / Remove Fixpoint / First Truthy Index Under Function)

7 
ǒ (Modulo 3)

7 
Ṁ (Insert)

7 
□ (Input List)

6 
ṙ (Round)

6 
∪ (Set Union)

6 
§ (Vertical Join)

6 
ŀ (Left Justify / Gridify / Infinite Replace / Collect until false)

5 
Ż (Slice From One Until)

5 
⟇ (Remove at Index)

5 
ḃ (Boolify)

5 
ƈ (Choose / random choice / set same / drop while)

4 
¼ (Pop From Global Array)

4 
⟨ (Open List)

4 
⟩ (Close list)

4 
P (Strip / Minimums-by)

3 
↓ (Min by Tail)

3 
ė (Enumerate)

3 
z (Overlapping pairs)

3 
Ẇ (Split And Keep Delimiter)

3 
@ (Vectorised Length)

2 
↑ (Max by Tail)

1 
¢ (Infinite Replacement / Apply at Indices)

1 
X (Break)

