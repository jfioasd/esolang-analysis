   434 def
   375 the
   316 a
   294 x
   291 if
   252 defn
   240 in
   198 "
   173 is
   159 to
   156 =
   152 i
   152 of
   148 set
   134 0
   131 and
   122 nil
   121 1
   119 var
   108 do
   107 or
    94 f
    93 k
    91 ret
    89 ~
    89 for
    86 env
    81 #
    81 ind
    79 defmacro
    79 an
    79 true
    79 res
    76 fn
    76 when
    75 length
    75 ]
    75 ###
    74 n
    70 that
    70 put
    69 &
    69 value
    67 t
    65 string
    65 as
    65 tuple
    62 [x]
    61 will
    58 not
    58 get
    58 each
    55 be
    51 len
    51 type
    51 array/push
    51 2
    51 break
    50 form
    49 +
    49 path
    48 `
    48 Returns
    48 p
    47 while
    47 error
    46 with
    44 --
    44 pattern
    43 -
    43 y
    42 first
    41 defn-
    39 body]
    39 If
    39 let
    39 loop
    38 function
    38 []
    38 print
    37 @[]
    37 binding
    37 s
    37 c
    36 returns
    36 current
    35 false
    34 args
    33 next
    33 The
    33 but
    33 *
    33 source
    33 line
    32 array
    32 [x
    32 default
    32 bindings
    32 where
    31 buf
    31 "Check
    31 v
    31 body
    31 key
    31 new
    30 [&
    30 indent
    29 tuple/slice
    29 [f
    29 symbol
    29 ,
    29 sym
    29 ,f
    28 gensym
    28 match
    28 all
    28 data
    28 into
    27 &opt
    27 are
    27 on
    27 from
    27 map
    27 level
    26 return
    26 @{}
    26 last
    26 values
    26 >
    26 dyn
    26 d
    26 [&opt
    26 cursor
    25 :tuple
    25 start
    25 case
    25 not=
    25 table
    25 elements
    25 [i
    24 xs
    24 by
    24 defdyn
    23 <
    23 ,;body
    23 chr
    23 ds
    23 end
    23 pred
    23 stack
    22 ""
    22 accum
    21 any
    21 :
    20 ```
    20 name
    20 setdyn
    20 [&]
    20 b
    19 n]
    19 if-not
    19 ,res
    19 at
    19 ind]
    19 m
    19 code
    18 cond
    18 pairs
    18 prefix
    18 module
    17 more
    17 index
    17 used
    17 can
    17 args]
    17 ++
    17 element
    17 compile
    17 environment
    17 eprint
    17 :exit
    16 ,x
    16 same
    16 if-let
    16 :range
    16 el
    16 arr
    15 recur
    15 ;args
    15 fiber
    15 object
    15 seq
    15 ;
    15 file
    14 This
    14 unless
    14 forms
    14 should
    14 r
    14 head
    14 forv
    14 over
    14 [0
    14 given
    14 root-env
    14 new-indent
    14 frame
    13 functions
    13 number
    13 with-syms
    13 also
    13 :in
    13 it
    13 h
    13 "Get
    13 indexed
    13 [k
    13 use
    13 [pred
    13 item
    13 string/slice
    13 l
    13 anda
    13 col
    13 e
    12 [name
    12 :table
    12 :struct
    12 :array
    12 "Returns
    12 "expected
    12 which
    12 [
    12 3
    12 >=
    12 structure
    12 when-let
    12 left
    12 ks
    12 entry
    12 parser
    12 &]
    12 module/cache
    12 fun
    11 ,;
    11 `f`
    11 its
    11 evaluates
    11 optional
    11 then
    11 aux
    11 :error
    11 after
    11 some
    11 [n
    11 one
    11 range
    11 `ind`
    11 parts
    11 len-1
    11 [path
    11 string/has-prefix?
    11 str
    11 src
    10 apply
    10 macro.
    10 +=
    10 no
    10 ,r
    10 argument
    10 v]
    10 stop
    10 :keys
    10 filter
    10 other
    10 alias
    10 dynamic
    10 lint
    10 ":"
    10 b2g
    10 :source
    10 module/paths
    10 fullpath
    10 colorize
    10 bytecode
     9 `."
     9 string?
     9 nil."
     9 expression
     9 result
     9 second
     9 truthy,
     9 forms]
     9 truthy
     9 bound
     9 step
     9 ,i
     9 <=
     9 keys
     9 before
     9 only
     9 ,$accum
     9 ``Returns
     9 compare
     9 xs]
     9 instead
     9 right
     9 found
     9 parent-sym
     9 gun
     9 lints
     9 arg
     9 ec
     9 read
     9 loader
     9 buffer/push
     9 .frame
     8 more]
     8 macro
     8 symbol?
     8 :function
     8 [xs]
     8 idempotent?
     8 evaluate
     8 string/format
     8 ;body
     8 'def
     8 array/concat
     8 errors
     8 ,fiber/new
     8 ,resume
     8 otherwise
     8 .
     8 call
     8 nested
     8 previous
     8 using
     8 fibers
     8 multiple
     8 4
     8 provided,
     8 inds]
     8 arguments
     8 keyword
     8 -2
     8 this
     8 exit
     8 fop
     8 kvs
     8 struct
     8 mode
     8 preds
     8 evaluator
     8 chunks
     8 environment.
     8 such
     8 image
     8 "/"
     8 nextenv
     8 skipwhite
     8 current-indent
     8 token
     8 current-column
     8 pc
     7 :macro
     7 ,name
     7 private
     7 :private
     7 def-
     7 inc
     7 /
     7 ,val
     7 condition
     7 'if
     7 value.
     7 like
     7 passed
     7 ``Similar
     7 rest
     7 each-template
     7 ,k
     7 ,verb
     7 ,rest
     7 eachp
     7 sequence
     7 `loop`
     7 table.
     7 have
     7 g
     7 primitive
     7 than
     7 c]
     7 array/slice
     7 so
     7 ,inds
     7 ,ind
     7 ,maptype
     7 map-template
     7 Use
     7 repl
     7 compilation
     7 tuple/type
     7 [t]
     7 patterns
     7 on-binding
     7 qq
     7 :ref
     7 deep-not=
     7 callback
     7 $
     7 make-env
     7 *err-color*
     7 eprin
     7 thunk
     7 eval
     7 mod-kind
     7 os/exit
     7 exit-error
     7 skipline
     7 "-"
     7 push
     7 p-start
     7 finish-p
     7 function."
     7 is-safe-def
     7 subargs
     7 exit-on-error
     6 [i]
     6 buffer
     6 old
     6 Same
     6 global
     6 :symbol
     6 bytes?
     6 odd?
     6 1."
     6 Will
     6 "A
     6 true.
     6 restlen
     6 nil.``
     6 atm
     6 'do
     6 `body`
     6 ['def
     6 defer
     6 :dead
     6 @""
     6 delta
     6 :pairs
     6 ,iter
     6 :when
     6 side
     6 structure.
     6 See
     6 fiber/new
     6 'fn
     6 x]
     6 complement
     6 extreme
     6 take
     6 structure."
     6 `compare`
     6 y]
     6 compare-reduce
     6 lo
     6 hi
     6 before?
     6 sort
     6 `ind`.
     6 array.``
     6 inds
     6 make
     6 bytes
     6 output
     6 debugger
     6 column
     6 Useful
     6 keep-syntax!
     6 modified
     6 form]
     6 prev
     6 temp
     6 newv
     6 last-key
     6 func
     6 span
     6 partition
     6 symbols
     6 :brackets
     6 local
     6 sub-pattern
     6 msg
     6 expand-bindings
     6 :value
     6 types
     6 freeze
     6 [p
     6 }
     6 modules
     6 parent
     6 handler
     6 string/repeat
     6 debug/stacktrace
     6 getline
     6 paths
     6 loading
     6 dofile
     6 documentation
     6 string/replace-all
     6 token-length
     6 emit-indent
     6 .fiber
     6 dasm
     6 lazy
     6 no-side-effects
     6 no-file
     6 error-level
     6 flat
     5 `.
     5 modifiers
     5 :string
     5 "Define
     5 literal
     5 "Set
     5 keyword?
     5 :buffer
     5 function?
     5 tuple?
     5 symbol,
     5 indexed?
     5 macros
     5 "Shorthand
     5 assert
     5 errorf
     5 fmt
     5 `.``
     5 ,sym
     5 else
     5 [condition
     5 found,
     5 corresponding
     5 there
     5 value.``
     5 even
     5 ,fiber/status
     5 fi
     5 ``Run
     5 signal
     5 Otherwise,
     5 returned
     5 binding.
     5 :close
     5 comparison
     5 ,s
     5 [binding
     5 range-template
     5 ,ds
     5 `ds`.
     5 A
     5 [start,
     5 `n`
     5 [head
     5 functions]
     5 -1
     5 identity
     5 numeric
     5 ``Equivalent
     5 polymorphic
     5 comparator.``
     5 calling
     5 reduce
     5 array,
     5 version
     5 does
     5 :all
     5 map-n
     5 ninds
     5 every
     5 predicate,
     5 array/new
     5 find-index
     5 reverse
     5 '&
     5 called
     5 must
     5 slice
     5 top
     5 *lint-error*
     5 *lint-warn*
     5 tuple/sourcemap
     5 on.
     5 walk-ind
     5 walk-dict
     5 table/to-struct
     5 2]]
     5 vars
     5 kk
     5 vk
     5 they
     5 nextn
     5 slurp
     5 file/open
     5 file/read
     5 flush
     5 visit-pattern-1
     5 isarr
     5 visit-pattern-2
     5 unify
     5 [[k
     5 dotable
     5 expandall
     5 thaw
     5 :doc
     5 short-fn
     5 bad-parse
     5 col]
     5 eflush
     5 bad-compile
     5 fiber/getenv
     5 run-context
     5 guard
     5 :evaluator
     5 [buf
     5 good
     5 lint-error
     5 lint-warning
     5 state
     5 compwhen
     5 "."
     5 module/add-paths
     5 find-prefix
     5 array/insert
     5 debugger-on-status
     5 exit-fiber
     5 :prefix
     5 has-color
     5 cn
     5 parse-blocks
     5 delim
     5 emit-nl
     5 sm
     5 :source-map
     5 REPL
     5 lib
     5 debug-flag
     4 function.
     4 [args]
     4 defmacro-
     4 exported."
     4 value]
     4 name*
     4 :fiber
     4 ."
     4 string,
     4 nil?
     4 ns]
     4 ,;ns
     4 truthy.
     4 err
     4 ,condition
     4 dispatch
     4 has
     4 ``Create
     4 Each
     4 [bindings
     4 ,fib
     4 two
     4 falsey
     4 $fi
     4 syms
     4 ,propagate
     4 prompt
     4 target
     4 ,binding
     4 without
     4 st
     4 [rest]
     4 inx
     4 kind
     4 loop1
     4 repeat
     4 either
     4 value,
     4 inside
     4 details.``
     4 ,head
     4 coro
     4 making
     4 form.
     4 tru
     4 bl
     4 [[f
     4 min
     4 neg?
     4 equal
     4 sort-help
     4 `<`.``
     4 sorted
     4 produce
     4 init
     4 intermediate
     4 map-aggregator
     4 n]]
     4 'key
     4 new-key
     4 ``Given
     4 containing
     4 results
     4 collection
     4 ]]
     4 `dflt`
     4 dflt]
     4 dflt
     4 find
     4 len]
     4 tuple,
     4 use-str
     4 replace
     4 prints
     4 *redef*
     4 *debug*
     4 Can
     4 `run-context`
     4 *macro-form*
     4 warning
     4 printed
     4 *current-file*
     4 compiling
     4 upscope
     4 "%q"
     4 sourcemap
     4 ast
     4 Inserts
     4 `forms`,
     4 inserts
     4 manner,
     4 expressing
     4 pipelines
     4 data.``
     4 [last
     4 [h
     4 t]
     4 [,sym
     4 table,
     4 postwalk
     4 with-dyns
     4 associative
     4 `ds`
     4 table.``
     4 [ds
     4 merge-into
     4 freqs
     4 category
     4 ``Takes
     4 [path]
     4 "could
     4 contents
     4 *pretty-format*
     4 stdout
     4 cases
     4 get-sym
     4 get-length-sym
     4 pattern]
     4 template
     4 sub-pattern]
     4 unification
     4 macex1
     4 expanddef
     4 t1
     4 xx
     4 yy
     4 expansion
     4 environment,
     4 metadata
     4 ,entry
     4 max-param-seen
     4 num
     4 lookup
     4 .``
     4 :a
     4 :s
     4 :w
     4 :h
     4 *syspath*
     4 newenv
     4 parse
     4 ":
     4 source-code
     4 fiber/current
     4 nth
     4 :exit-value
     4 being
     4 :on-status
     4 on-compile-error
     4 :parser
     4 :read
     4 p]
     4 eval1
     4 levels
     4 resume
     4 pindex
     4 parser/status
     4 parser/error
     4 load-image-dict
     4 load-image
     4 marshal
     4 loaded
     4 :image
     4 ext
     4 mod-kind]
     4 [fullpath
     4 module/loading
     4 ">
     4 fiber/status
     4 path-is-file
     4 native
     4 kargs
     4 import*
     4 show
     4 doc-format
     4 :code
     4 modes
     4 c++
     4 c+=n
     4 "*"
     4 indent]
     4 temp-stack
     4 [indent]
     4 p-end
     4 emit-word
     4 last-byte
     4 emit-node
     4 subel
     4 print-module-entry
     4 breakpoints
     4 delay
     4 native-path
     4 flycheck-evaluator
     4 safe-check
     4 flycheck
     4 getenv-alias
     4 main
     4 *args*
     4 *profilepath*
     4 should-repl
     4 quiet
     4 compile-only
     4 warn-level
     4 handlers
     4 janet
     4 Set
     4 janet/build
     4 load-dict
     4 */"
     4 do-one-file
     3 docstr
     3 {i
     3 ith
     3 signature
     3 lets
     3 ,;more
     3 number?
     3 array?
     3 empty?
     3 For
     3 mod
     3 C
     3 ,v
     3 combination
     3 `Evaluates
     3 until
     3 body.
     3 expression.
     3 bind
     3 symbols.
     3 `let`
     3 try
     3 catch
     3 errors.
     3 form,
     3 contain
     3 [,f
     3 ,body
     3 Evaluates
     3 ['if
     3 s]
     3 `form`
     3 run
     3 r]
     3 :ti
     3 up
     3 [res
     3 byte
     3 [[binding
     3 ctor
     3 dtor]
     3 dtor
     3 binding]
     3 nil,
     3 path.
     3 for-var-template
     3 ,st
     3 for-template
     3 op
     3 :each
     3 i]
     3 :while
     3 :let
     3 verb
     3 effects.
     3 loop,
     3 normal
     3 "Loop
     3 times.
     3 forever
     3 macro,
     3 contains
     3 available
     3 are:
     3 two-element
     3 half
     3 iterate
     3 fiber.
     3 defines
     3 inner
     3 nil.
     3 `loop`,
     3 accumulates
     3 $accum
     3 yield
     3 :yi
     3 flags
     3 sum
     3 xs.
     3 empty,
     3 0."
     3 least
     3 br
     3 "Same
     3 ;x
     3 `args`
     3 order
     3 max
     3 uses
     3 [c
     3 zero?
     3 before?]
     3 pivot
     3 it.
     3 `,
     3 ``The
     3 array.
     3 'ind
     3 iter-keys
     3 done
     3 ii
     3 mapcat
     3 predicate
     3 original
     3 With
     3 [n]
     3 ``Find
     3 found.``
     3 look
     3 slice-n
     3 slice-until
     3 negn
     3 $args
     3 prevent
     3 keywords
     3 cause
     3 complete.
     3 "The
     3 level.
     3 custom
     3 cf
     3 information
     3 ``Like
     3 sym]
     3 walk
     3 traversal
     3 [y]
     3 ``Evaluates
     3 [ret
     3 ,ret
     3 [ind]
     3 j
     3 `ds`,
     3 keys.
     3 Looks
     3 via
     3 replaced
     3 tables.
     3 last-val
     3 appears
     3 container
     3 @[x]
     3 `x`
     3 is-new
     3 cols
     3 seen
     3 flatten-into
     3 `xs`
     3 ps
     3 slicer
     3 file.``
     3 :rb
     3 open
     3 file/close
     3 :line
     3 against
     3 `x`.
     3 following
     3 oddlen
     3 x-sym
     3 nil]
     3 length-symbols
     3 emit
     3 symbol-key
     3 '_
     3 'quote
     3 Compile
     3 [level
     3 recursively
     3 expand
     3 newt
     3 x0
     3 mutable
     3 identical
     3 tx
     3 table/getproto
     3 their
     3 [entry
     3 |
     3 vararg
     3 saw-special-arg
     3 '$
     3 grammar
     3 defined
     3 complex
     3 "09"
     3 :d
     3 load
     3 syspath
     3 "Default
     3 where]
     3 :where
     3 "\e[0m"
     3 print-line-col
     3 file.
     3 string/find
     3 warn-compile
     3 macrof
     3 ``Get
     3 prototype
     3 lint-levels
     3 parsing,
     3 :<anonymous>
     3 {:env
     3 :chunks
     3 onstatus
     3 on-compile-warning
     3 on-parse-error
     3 default-where
     3 resumeval
     3 lvl
     3 fiber/setenv
     3 parser/new
     3 p-status
     3 p-has-more
     3 parse-err
     3 tup
     3 parser-not-done
     3 buffer/clear
     3 new-where
     3 `run-context`.``
     3 [str]
     3 ``A
     3 unmarshal
     3 make-image-dict
     3 images
     3 make-image
     3 time
     3 :source,
     3 including
     3 `module/paths`.
     3 fexists
     3 mod-filter
     3 module/find
     3 expander
     3 debugger-env
     3 debugger-on-status-var
     3 :delimiters
     3 :env
     3 :debug
     3 spath
     3 false]
     3 z
     3 `import`
     3 require-1
     3 running
     3 merge-module
     3 env-walk
     3 local]
     3 envs
     3 ret-set
     3 *doc-color*
     3 :italics
     3 :bold
     3 active
     3 ul?
     3 ol?
     3 fcb?
     3 getslice
     3 parse-list
     3 item-indent
     3 item-stack
     3 add-codeblock
     3 tokens
     3 endtoken
     3 first-line
     3 word
     3 lab
     3 print-index
     3 string/join
     3 doc
     3 debugged."
     3 .signal
     3 "Show
     3 .fn
     3 disasm
     3 .bytecode
     3 :pc
     3 last-loc
     3 loc
     3 breakpoint
     3 breakpoint."
     3 cancel-all
     3 ,fset
     3 ,chan
     3 ,ftemp
     3 ,state
     3 ,loaded
     3 *ffi-context*
     3 library
     3 arg-pairs
     3 raw-symbol
     3 make-sig
     3 make-ptr
     3 CLI
     3 run-main
     3 char
     3 raw-stdin
     3 handleopts
     3 expect-image
     3 get-lint-level
     3 stdin
     3 janet/version
     3 lenargs
     3 "/*
     3 fname
     2 Equivalent
     2 ...
     2 fstart
     2 Add
     2 docstring
     2 arglen
     2 Build
     2 as-macro
     2 variable
     2 var-
     2 ,value
     2 "Dynamically
     2 create
     2 @{:value
     2 @{:ref
     2 predicates
     2 NaN."
     2 symbol."
     2 :keyword
     2 buffer."
     2 cfunction?
     2 struct."
     2 tuple."
     2 dictionary?
     2 truthy."
     2 define
     2 non-atomic-types
     2 true}
     2 itself
     2 dec
     2 "Increments
     2 ,+
     2 ,1
     2 "Decrements
     2 ,-
     2 n."
     2 *=
     2 ,n
     2 ``Define
     2 argument.
     2 val]
     2 "Evaluates
     2 executes
     2 odd
     2 matches,
     2 nil.`
     2 pairs]
     2 equals
     2 `pairs`
     2 elements,
     2 pair
     2 something
     2 `catch`
     2 tuple.
     2 error,
     2 error.``
     2 [body
     2 :ie
     2 ,=
     2 ,not=
     2 preceding
     2 falsey,
     2 user
     2 0-4
     2 [form
     2 ,form
     2 ``Set
     2 got
     2 %v"
     2 label
     2 lexically
     2 `name`
     2 "Return
     2 [to
     2 ``Evaluate
     2 `binding`
     2 `dtor`
     2 when-with
     2 [,binding
     2 ,ctor]
     2 In
     2 loop-body
     2 [~
     2 check-indexed
     2 range,
     2 ,next
     2 ,in
     2 iterate-template
     2 recursion
     2 term
     2 [rest
     2 :until
     2 [iter]
     2 "unexpected
     2 :down
     2 ``Do
     2 C-style
     2 for-loop
     2 "Evaluate
     2 negative,
     2 evaluated
     2 Bindings
     2 keywords,
     2 creates
     2 within
     2 created
     2 step.
     2 inclusive
     2 end].
     2 key-value
     2 tuples
     2 `:modifier`
     2 expression`
     2 breaks
     2 `expression`
     2 form`
     2 effect
     2 loop.
     2 always
     2 that.
     2 ,put
     2 order.
     2 wrapper
     2 may
     2 '[]
     2 mean
     2 product
     2 macro.``
     2 bindings"
     2 fal
     2 comp
     2 those
     2 functions.`
     2 argument."
     2 [f]
     2 empty.``
     2 maximum
     2 arguments."
     2 minimum
     2 sequence."
     2 y,
     2 respectively.
     2 see
     2 method
     2 :compare
     2 ok
     2 even?
     2 median-of-three
     2 [a
     2 tmp
     2 ``Sorts
     2 `before?`
     2 comparator
     2 sorts
     2 that,
     2 [ind
     2 comparing
     2 many
     2 applying
     2 arguments,
     2 `accum`
     2 initial
     2 `f`.
     2 `reduce`
     2 final
     2 2-argument
     2 initialization
     2 what
     2 added
     2 logic
     2 [maptype
     2 maptype
     2 :map
     2 :mapcat
     2 :keep
     2 :count
     2 :some
     2 array/new-filled
     2 call-buffer
     2 `pred`
     2 different
     2 `Create
     2 argument,
     2 [0,
     2 index-of
     2 take-n-fallback
     2 take-until-fallback
     2 fiber,
     2 type.
     2 take-until
     2 take-while
     2 `Given
     2 satisfy
     2 abort
     2 failure.
     2 respectively.`
     2 drop
     2 instead.``
     2 drop-until
     2 drop-while
     2 remove
     2 juxt*
     2 functions.
     2 funs]
     2 funs
     2 behavior
     2 add
     2 between
     2 *out*
     2 "Where
     2 to."
     2 printing
     2 "When
     2 set,
     2 rebinding
     2 generated
     2 repl."
     2 context
     2 *lint-levels*
     2 currently
     2 file."
     2 stderr
     2 [l
     2 fmt-1
     2 fmt-2
     2 ,dyn
     2 :pretty-format
     2 keep-syntax
     2 `after`
     2 preserve
     2 syntactic
     2 transforming
     2 macros.``
     2 [before
     2 after]
     2 tuple/brackets
     2 tuple/setmap
     2 ``Threading
     2 @[h
     2 @[h]
     2 ``Short
     2 circuit
     2 threading
     2 pipeline
     2 ,last]
     2 prewalk
     2 ``Thread
     2 together,
     2 replacing
     2 `as`
     2 `forms`
     2 x.
     2 next-prev
     2 ,prev]
     2 ,next-prev
     2 `Run
     2 Similar
     2 ['set
     2 partial
     2 res]
     2 `Reverses
     2 values,
     2 invert
     2 [ds]
     2 vs
     2 Missing
     2 structures
     2 modified,
     2 structure.``
     2 ks"
     2 [newv
     2 `func`
     2 ``Merges
     2 tables/structs
     2 `colls`,
     2 later
     2 ones.
     2 colls]
     2 colls
     2 tab
     2 merge
     2 distinct
     2 ``Partition
     2 ncol
     2 ci
     2 tree
     2 depth
     2 flatten
     2 inverse
     2 interpose
     2 `path`
     2 spit
     2 file/write
     2 format
     2 printf
     2 Pattern
     2 followed
     2 symbol.
     2 bracket
     2 `_`
     2 special
     2 creating
     2 <sym>
     2 already
     2 Any
     2 Keep
     2 emit-branch
     2 :branch
     2 [parent-sym
     2 key]
     2 [s
     2 @[s]
     2 quoted
     2 single
     2 pattern,
     2 %q"
     2 '@
     2 predicated
     2 pattern-len
     2 ['=
     2 expression]
     2 [=
     2 ;syms]
     2 pred-join
     2 array/pop
     2 if-form
     2 *macro-lints*
     2 [nil
     2 msg]
     2 ``Expand
     2 `macex`
     2 on-binding]
     2 @[
     2 expandfn
     2 expandqq
     2 specs
     2 'var
     2 dotup
     2 m?
     2 encountered.
     2 arrays,
     2 tables,
     2 buffers
     2 considered
     2 Much
     2 slower
     2 deep
     2 copy,
     2 child
     2 Closures,
     2 fibers,
     2 abstract
     2 table/clone
     2 table/proto-flatten
     2 macex
     2 `on-binding`
     2 allows
     2 expanded
     2 counter
     2 f]
     2 ',name
     2 Function
     2 shorthand
     2 variadic
     2 function,
     2 arguments.
     2 '$&
     2 scan-number
     2 Default
     2 *peg-grammar*
     2 default-peg-grammar
     2 "az"
     2 "AZ"
     2 "Path
     2 directory
     2 system
     2 "JANET_PATH"
     2 table/setproto
     2 "Whether
     2 error."
     2 [line
     2 "\e[31m"
     2 error:
     2 file,
     2 line-end
     2 [msg
     2 curenv
     2 Run
     2 options
     2 parsing
     2 fails
     2 `:on-status`
     2 wrap
     2 provide
     2 :on-compile-error
     2 :on-parse-error
     2 :expander
     2 :ydt
     2 Evaluate
     2 fiber/can-resume?
     2 p-consume
     2 p-produce
     2 :cancel
     2 chunk
     2 Check
     2 quit
     2 control
     2 needed,
     2 `Parse
     2 handling,
     2 api.`
     2 parser/consume
     2 parser/eof
     2 parser/has-more
     2 parser/produce
     2 "no
     2 parse-all
     2 parsed
     2 eval-string
     2 compif
     2 `cnd`
     2 [cnd
     2 cnd
     2 "@"
     2 mapping
     2 list
     2 :native,
     2 `require`
     2 files
     2 dyn-index
     2 ":@all:"
     2 all-index
     2 ".:all:"
     2 sys-index
     2 curall-index
     2 ":cur:/:all:"
     2 :native
     2 :preload
     2 reduced
     2 module/expand-path
     2 Used
     2 prefixed
     2 "Run
     2 pass
     2 :signal
     2 fiber/last-value
     2 debugger-chunks
     2 status
     2 :state
     2 prpt
     2 debug["
     2 "]"
     2 [env
     2 fs
     2 stream
     2 true,
     2 &named
     2 _]
     2 bp
     2 [*err*
     2 bc
     2 nenv
     2 propagate
     2 module/loaders
     2 [check
     2 :fresh
     2 check
     2 name.
     2 search
     2 strings
     2 import
     2 :as
     2 One
     2 true`"
     2 imported
     2 NOT
     2 v]]
     2 all-bindings
     2 Defaults
     2 fiber's
     2 `local`
     2 inherited
     2 tables
     2 all-dynamics
     2 *doc-width*
     2 `doc-format`."
     2 formatted
     2 width
     2 max-width
     2 delimiters
     2 {:underline
     2 ["\e[4m"
     2 "\e[24m"]
     2 toggle-mode
     2 [mode]
     2 delims
     2 Parse
     2 helpers
     2 characters
     2 matched
     2 x1
     2 c2
     2 c*
     2 "`"
     2 nl?
     2 old-stack
     2 replace-chunk
     2 parse-fcb
     2 parse-icb
     2 tokenize-line
     2 [line]
     2 "_"
     2 p-line
     2 :ul
     2 :ol
     2 fl-open
     2 fl-close
     2 Emission
     2 [word
     2 emit-code
     2 replacement
     2 "Print
     2 fltr
     2 dynamics
     2 bind-type
     2 :module
     2 :kind
     2 ",
     2 print-special-form-entry
     2 found."
     2 `sym`
     2 .slots
     2 :slots
     2 .disasm
     2 assembly
     2 :bytecode
     2 eprintf
     2 padding
     2 instr
     2 debug/fbreak
     2 "set
     2 "Clear
     2 debug/unfbreak
     2 "cleared
     2 all-source
     2 pc="
     2 .clear
     2 .next
     2 "Go
     2 debugger-keys
     2 parameter
     2 well
     2 onsignal
     2 "repl:"
     2 ev/call
     2 Call
     2 ev/go
     2 ,ev/go
     2 thread.
     2 ,ev/thread
     2 [chan
     2 canceled"
     2 ``
     2 bodies]
     2 server
     2 port
     2 default-mangle
     2 map-symbols
     2 ffi/native
     2 lazy-lib
     2 :native-lazy
     2 :lazy
     2 :map-symbols
     2 ret-type
     2 real-ret-type
     2 llib
     2 ffi
     2 ,;meta
     2 [,;formal-args]
     2 ,ffi/call
     2 ,;formal-args
     2 safe-forms
     2 importers
     2 use-2
     2 executed,
     2 safe
     2 newtup
     2 old-modcache
     2 table/clear
     2 wrap-main
     2 ;subargs
     2 command
     2 *executable*
     2 execute
     2 script
     2 Print
     2 flag
     2 scripts
     2 profile.janet
     2 ANSI
     2 color
     2 dohandler
     2 '
     2 getprompt
     2 getstdin
     2 new-env
     2 getter
     2 getchunk
     2 boot/config
     2 windows
     2 env-lookup
     2 essential-pairs
     2 reverse-lookup
     2 Create
     2 feature-header
     2 local-headers
     2 core-sources
     2 build
     2 included
     2 unsigned
     1 Define
     1 ith}
     1 buffer/push-string
     1 buffer/format
     1 "%j"
     1 ,;modifiers
     1 macro."
     1 override
     1 definitions
     1 recursive
     1 ``Use
     1 Inside
     1 quasiquote,
     1 idiom
     1 ,my-custom-macro
     1 arg1
     1 arg2...
     1 avoid
     1 unwanted
     1 capture
     1 `my-custom-macro`.``
     1 toggle
     1 boolean
     1 inverse.
     1 [value]
     1 ,not
     1 defglobal
     1 def."
     1 value}
     1 varglobal
     1 var."
     1 init]
     1 @[init]}
     1 Basic
     1 nan?
     1 number."
     1 :number
     1 fiber?
     1 fiber."
     1 string."
     1 keyword."
     1 buffer?
     1 cfunction
     1 cfunction."
     1 :cfunction
     1 table?
     1 table."
     1 struct?
     1 array."
     1 boolean?
     1 boolean."
     1 :boolean
     1 keyword,
     1 truthy?
     1 true?
     1 true."
     1 false?
     1 false."
     1 empty."
     1 macros,
     1 we
     1 imcomplete
     1 overriden.
     1 {:array
     1 compiled."
     1 style
     1 imperative
     1 sugar.
     1 No
     1 bitwise
     1 though.
     1 -=
     1 \*
     1 ,*
     1 /=
     1 ,/
     1 %=
     1 %
     1 ,%
     1 "Throw
     1 `err`
     1 err]
     1 ,error
     1 "assert
     1 failure
     1 %j"
     1 `error`
     1 `string/format`.
     1 [fmt
     1 Expands
     1 val
     1 [sym
     1 comment
     1 "Ignores
     1 comment."
     1 else]
     1 ,else
     1 ,then
     1 Otherwise
     1 conditions
     1 sequentially
     1 forms,
     1 matched,
     1 executed.
     1 ``Select
     1 When
     1 [dispatch
     1 scope
     1 `bindings`
     1 assigned
     1 `def`,
     1 let"
     1 @['do]
     1 v}
     1 ``Try
     1 expression,
     1 wrapping
     1 catch]
     1 [[[err
     1 fib]]
     1 ,err
     1 fib
     1 protect
     1 `Evaluate
     1 expressions,
     1 capturing
     1 elements.
     1 successful,
     1 error.`
     1 ,r]
     1 argument.`
     1 element.`
     1 `syms`
     1 generated,
     1 unique
     1 [syms
     1 [gensym]
     1 ,;accum
     1 unconditionally
     1 `body`,
     1 throws
     1 error.
     1 received.``
     1 edefer
     1 terminates
     1 abnormally
     1 `body`.``
     1 checkpoint
     1 to.
     1 `tag`
     1 `return`
     1 statement,
     1 keyword.``
     1 [tag
     1 payload
     1 fib]
     1 [,tag
     1 :i0
     1 [,target
     1 ,payload]
     1 ,tag
     1 ,target
     1 ,payload
     1 `Convert
     1 ascii
     1 time.`
     1 [c]
     1 1,
     1 point
     1 scoped.
     1 label.``
     1 point."
     1 resource,
     1 automatically
     1 cleaned
     1 `body`.
     1 `ctor`,
     1 callable
     1 destructor
     1 given,
     1 resource.``
     1 ,ctor
     1 with,
     1 evaluating
     1 `with`.``
     1 if-with
     1 `with`,
     1 both
     1 cases,
     1 `ctor`
     1 binding.``
     1 falsey]
     1 [truthy]
     1 ,falsey
     1 [s]
     1 ,comparison
     1 ,delta
     1 ,start
     1 ,stop
     1 ,step
     1 ,>
     1 ,loop-body
     1 ;body]
     1 comparison]
     1 [[start
     1 step]
     1 [k]
     1 ,inx
     1 ,tuple
     1 expr
     1 ,expr
     1 Terminate
     1 verb}
     1 :after
     1 :before
     1 :repeat
     1 modifier
     1 {
     1 object}
     1 :range-to
     1 :down-to
     1 :iterate
     1 iteration
     1 `i`
     1 mutated
     1 unlike
     1 `for`.
     1 "Do
     1 eachk
     1 key,
     1 statement."
     1 general
     1 purpose
     1 similar
     1 Common
     1 Lisp
     1 although
     1 intentionally
     1 much
     1 smaller
     1 scope.
     1 conditionals.
     1 three
     1 over.
     1 written
     1 format:
     1 :verb
     1 object/expression
     1 def,
     1 `:verb`
     1 `object`
     1 subsequent
     1 verbs
     1 `:iterate`
     1 repeatedly
     1 `:range`
     1 range.
     1 positive
     1 open,
     1 `:range-to`
     1 :range,
     1 `:down`
     1 stepping
     1 downwards.
     1 exclusive
     1 positive!
     1 size.
     1 `:down-to`
     1 :down,
     1 `:keys`
     1 `:pairs`
     1 `:in`
     1 accepts
     1 conditionals
     1 refine
     1 looping
     1 further.
     1 Conditionals
     1 form:
     1 :modifier
     1 `argument`
     1 keyword-dependent.
     1 of:
     1 `:while
     1 falsey.
     1 `:until
     1 `:let
     1 bindings`
     1 `:before
     1 `:after
     1 `:before`,
     1 happens
     1 `:repeat
     1 n`
     1 repeats
     1 `:when
     1 condition`
     1 `condition`
     1 ,array/push
     1 catseq
     1 concatenates
     1 ,array/concat
     1 tabseq
     1 key-body
     1 value-body]
     1 ,key-body
     1 ,;value-body
     1 generate
     1 generator
     1 syntax.
     1 yields
     1 coroutine
     1 fiber-fn
     1 fibers.
     1 [flags
     1 ``Make
     1 bindings,
     1 `tru`
     1 `fal`
     1 syntax
     1 fal]
     1 binding"
     1 Simple
     1 Destructured
     1 ,bindings
     1 `Takes
     1 composition
     1 g]
     1 h]
     1 most
     1 based
     1 `order`.
     1 `order`
     1 [order
     1 [ret]
     1 max-of
     1 min-of
     1 ##
     1 Polymorphic
     1 comparisons
     1 ``Polymorphic
     1 compare.
     1 -1,
     1 0,
     1 Differs
     1 comparators
     1 checks
     1 whether
     1 implement
     1 y.
     1 so,
     1 method.
     1 not,
     1 delegates
     1 comparators.``
     1 cmp
     1 [op
     1 compare=
     1 `=`
     1 compare<
     1 `<`
     1 compare<=
     1 `<=`
     1 compare>
     1 `>`
     1 compare>=
     1 `>=`
     1 zero."
     1 pos?
     1 greater
     1 less
     1 one?
     1 even."
     1 odd."
     1 Indexed
     1 Combinators
     1 math/floor
     1 in-place,
     1 Uses
     1 quick-sort
     1 stable
     1 sort.
     1 sort-by
     1 in-place
     1 modifying
     1 one.
     1 sorted-by
     1 compares
     1 invoking
     1 ``Reduce,
     1 know
     1 fold-left
     1 languages,
     1 transforms
     1 `el`
     1 `f`.``
     1 reduce2
     1 Instead,
     1 initialization.``
     1 accumulate
     1 `reduce`,
     1 would
     1 `reduce`.
     1 `init`
     1 accumulate2
     1 `accumulate`
     1 is,
     1 `Aggregation
     1 various
     1 `Generates
     1 efficient
     1 specific
     1 beyond
     1 first.`
     1 [old-key
     1 old-key
     1 ;call-buffer
     1 `Map
     1 results.`
     1 ``Map
     1 `array/concat`
     1 concatenate
     1 results.``
     1 count
     1 ``Count
     1 items
     1 true.``
     1 keep
     1 `pred`,
     1 `filter`
     1 truthy.``
     1 three,
     1 size.`
     1 m]
     1 s]]
     1 range"
     1 satisfies
     1 predicate.
     1 associated
     1 structure,
     1 acting
     1 lookup.
     1 prototypes.
     1 sure
     1 "Take
     1 respectively."
     1 indexed,
     1 ``Drop
     1 `n
     1 instance,
     1 drops
     1 juxtaposition
     1 words,
     1 `[
     1 ]`.``
     1 juxt
     1 "Macro
     1 `juxt*`.
     1 efficient."
     1 @['tuple]
     1 normal,
     1 scoped
     1 typos.
     1 `defdyn`
     1 `dyn`
     1 `setdyn`.
     1 _must_
     1 `*`
     1 character,
     1 usually
     1 "earmuffs".``
     1 [alias
     1 "alias
     1 symbol"
     1 42
     1 "name
     1 leading
     1 trailing
     1 '*'
     1 characters"
     1 :defdyn-prefix
     1 kw
     1 ,alias
     1 :dyn
     1 ,kw
     1 *defdyn-prefix*
     1 ``Optional
     1 namespace
     1 declared
     1 `defdyn`.
     1 collisions
     1 bindings.``
     1 *err*
     1 allow
     1 dynamically
     1 defs.
     1 slow
     1 intended
     1 development."
     1 "Enables
     1 built
     1 useful
     1 features
     1 debugging
     1 *exit*
     1 example."
     1 *exit-value*
     1 upon
     1 exit.
     1 By
     1 default,
     1 "Inside
     1 invoked
     1 macro"
     1 continue."
     1 continue
     1 normal."
     1 numbers
     1 denoting
     1 provided
     1 aliases
     1 levels."
     1 "Bound
     1 tracev
     1 `Print
     1 description
     1 produced
     1 x.`
     1 "trace
     1 [%s]"
     1 "trace"
     1 %d,
     1 %d:"
     1 %j
     1 ,eprinf
     1 ,fmt
     1 ',x
     1 ,eprintf
     1 ``Creates
     1 `before`
     1 `after`.
     1 argements
     1 unmodified.
     1 :parens
     1 ;after
     1 `keep-syntax`,
     1 coerced
     1 ->
     1 last]
     1 ->>
     1 @[last]
     1 -?>
     1 -?>>
     1 @[sym]
     1 ``Iterate
     1 them.
     1 Collect
     1 struct,
     1 form.``
     1 post-order
     1 visitation.``
     1 "Similar
     1 `postwalk`,
     1 pre-order
     1 traversal."
     1 as->
     1 as?->
     1 nil;
     1 otherwise,
     1 block
     1 set.
     1 mask
     1 signals,
     1 properly
     1 unset,
     1 fiber-local.`
     1 dyn-forms
     1 ,;dyn-forms
     1 :p
     1 with-vars
     1 `vars`
     1 temporarily
     1 bound.
     1 `let`,
     1 var.``
     1 [vars
     1 vars"
     1 saveold
     1 setnew
     1 restoreold
     1 ,;saveold
     1 ,;setnew
     1 ,;restoreold
     1 "Partial
     1 application."
     1 ;more
     1 ;r
     1 every?
     1 any?
     1 `ind`,
     1 reverse!
     1 mutated.`
     1 reversed.`
     1 mapped
     1 become
     1 ds]
     1 zipcoll
     1 `Creates
     1 arrays/tuples.
     1 table.`
     1 [ks
     1 vs]
     1 get-in
     1 ``Access
     1 `dflt`.``
     1 update-in
     1 ``Update
     1 keys,
     1 replaces
     1 applied
     1 put-in
     1 ``Put
     1 update
     1 ``For
     1 along
     1 well.
     1 updated.``
     1 `tab`.
     1 `tab`.``
     1 [tab
     1 frequencies
     1 occurrences
     1 group-by
     1 ``Group
     1 arrays
     1 key.``
     1 [arr
     1 partition-by
     1 sequential
     1 representative
     1 Partitions
     1 split
     1 changes
     1 iterating
     1 arrays.``
     1 interleave
     1 col,
     1 etc."
     1 cols]
     1 ncol]]
     1 deduplicated
     1 `xs`."
     1 appends
     1 `into`.
     1 `into`.``
     1 [into
     1 `@[k
     1 ...]`.
     1 [dict]
     1 dict]
     1 dict
     1 from-pairs
     1 pair.
     1 It
     1 [ps]
     1 separated
     1 `sep`.
     1 [sep
     1 sep
     1 size
     1 `n`.
     1 math/ceil
     1 IO
     1 Helpers
     1 ``Read
     1 close
     1 ``Write
     1 `contents`
     1 `path`.
     1 optionally
     1 append
     1 mode]
     1 :wb
     1 "Format
     1 specifier
     1 `pp`
     1 function"
     1 pp
     1 ``Pretty-print
     1 file/lines
     1 iterator
     1 lines
     1 [file]
     1 Matching
     1 matching.
     1 Match
     1 cases.
     1 against,
     1 matched.
     1 Legal
     1 anything,
     1 `x`'s
     1 `&
     1 rest`
     1 bracketed
     1 remaining
     1 `rest`.
     1 treated
     1 wildcard
     1 While
     1 ordinarily
     1 @
     1 attempt
     1 `<sym>`,
     1 rather
     1 matching
     1 Quoting
     1 `'`
     1 treat
     1 against.
     1 cases]
     1 Partition
     1 sections.
     1 accumulating
     1 Table
     1 gensyms
     1 @{[nil
     1 x-sym}
     1 result]
     1 [get
     1 key]]
     1 [parent-sym]
     1 [indexed?
     1 parent-sym]
     1 [length
     1 parent-sym]]]
     1 [b2g
     1 pattern"
     1 follow
     1 @[[slice
     1 i]]
     1 [anda
     1 [rest-idx
     1 rest-idx
     1 [<=
     1 [not=
     1 recursing
     1 sub-patterns
     1 sigil
     1 [pattern
     1 @['and]
     1 Local
     1 Global
     1 syms]
     1 Final
     1 defs
     1 Predicates
     1 ,;defs
     1 ,;preds
     1 ['do
     1 ;defs
     1 Expand
     1 branches
     1 @[else]
     1 ,truthy
     1 array/remove
     1 Macro
     1 Expansion
     1 ``Bound
     1 messages
     1 reported
     1 compiler
     1 To
     1 indicate
     1 warning,
     1 author
     1 `maclintf`.``
     1 maclintf
     1 ``When
     1 linter
     1 warning.
     1 Takes
     1 `fmt`
     1 `string/format`,
     1 message.``
     1 macros.
     1 docs
     1 info
     1 `on-binding`.``
     1 [t
     1 on-value]
     1 on-value
     1 ~[,;
     1 'unquote
     1 {'set
     1 'quasiquote
     1 'while
     1 'break
     1 'upscope
     1 expandall}
     1 {}
     1 encountered.``
     1 `not=`,
     1 `not=`.``
     1 deep=
     1 `=`,
     1 `=`.``
     1 `Freeze
     1 immutable
     1 immutable.
     1 frozen,
     1 will.`
     1 `Thaw
     1 mutable.
     1 thawed,
     1 will`
     1 struct/proto-flatten
     1 completely.
     1 whenever
     1 symbolic
     1 easily
     1 contents.
     1 200
     1 "macro
     1 too
     1 nested"
     1 varfn
     1 rebound.
     1 `varfn`
     1 `defn`,
     1 vars.
     1 exists
     1 rebound
     1 function.``
     1 fbody
     1 "invalid
     1 old-entry
     1 [,old-entry
     1 ,old-entry
     1 @[nil]}
     1 ,setdyn
     1 ,fbody
     1 ,put-in
     1 [:ref
     1 0]
     1 ,merge-into
     1 ',metadata
     1 Shorthand
     1 `fn`.
     1 Arguments
     1 `$n`,
     1 0-indexed
     1 `$`
     1 `$&`
     1 anonymous
     1 combined
     1 positional
     1 Example
     1 usage:
     1 doubles
     1 $0
     1 $1
     1 accepting
     1 args.
     1 pipe
     1 reader
     1 terse
     1 literals.
     1 $&
     1 [arg
     1 name]
     1 [num]
     1 '$0
     1 :else
     1 nat?
     1 name-splice
     1 [name]
     1 fn-args
     1 ,;name-splice
     1 [,;fn-args
     1 ['&
     1 ,expanded
     1 PEG
     1 implicit
     1 base
     1 PEGs.
     1 undefined
     1 peg
     1 `The
     1 pegs.
     1 several
     1 common
     1 easier
     1 write
     1 patterns.`
     1 ~@{:d
     1  
     1 "af"
     1 "AF"
     1 :S
     1 :W
     1 :A
     1 :D
     1 :H
     1 :d+
     1 :a+
     1 :s+
     1 :w+
     1 :h+
     1 :d*
     1 :a*
     1 :w*
     1 :s*
     1 :h*
     1 Evaluation
     1 Compilation
     1 from."
     1 Initialize
     1 boot/args
     1 inherit
     1 pollute
     1 environment.`
     1 parent]
     1 turn
     1 coloring
     1 stacktraces
     1 messages."
     1 ``Print
     1 line,
     1 unable
     1 nothing.``
     1 [where
     1 :r
     1 "^"
     1 warning."
     1 "\e[33m"
     1 gets
     1 {:none
     1 :relaxed
     1 :normal
     1 :strict
     1 math/inf}
     1 context.
     1 expressions
     1 encapsulates
     1 compilation,
     1 evaluation.
     1 `opts`
     1 options.
     1 follows:
     1 `:chunks`
     1 `:on-parse-error`
     1 `:env`
     1 `:source`
     1 better
     1 non-paths
     1 `:on-compile-error`
     1 `:on-compile-warning`
     1 linting
     1 `:evaluator`
     1 thunks.
     1 Signature
     1 debug/stacktrace.
     1 `:fiber-flags`
     1 with.
     1 :ia.
     1 `:expander`
     1 compiled.
     1 `:parser`
     1 implements
     1 interface
     1 Janet's
     1 built-in
     1 parser.
     1 `:read`
     1 Overrides
     1 parsing.
     1 [opts]
     1 :on-compile-warning
     1 :fiber-flags
     1 expand}
     1 opts
     1 protected
     1 manner
     1 [source
     1 array/clear
     1 Convert
     1 numbers.
     1 {:error
     1 :column
     1 errf}
     1 errf
     1 Reader
     1 :consume
     1 :produce
     1 :status
     1 :has-more
     1 "Handle
     1 correct
     1 environment"
     1 Loop
     1 represents
     1 cancelled
     1 REPL,
     1 reset.
     1 :flush
     1 [:source
     1 new-where]
     1 pstatus
     1 :eof
     1 ``Tries
     1 run-context.
     1 Does
     1 application.
     1 Works
     1 setting
     1 Passing
     1 non-nil
     1 `value`
     1 here
     1 outer
     1 [form]
     1 :eval
     1 value"
     1 values.
     1 @[]]
     1 `unmarshal`
     1 sequences
     1 `make-image`,
     1 `marshal`
     1 comptime
     1 "Evals
     1 result.
     1 unquote."
     1 `tru`,
     1 `fals`."
     1 fals]
     1 fals
     1 `require`.
     1 string.``
     1 [env]
     1 operation
     1 `make-image`.
     1 environment."
     1 [image]
     1 check-dyn-relative
     1 check-relative
     1 check-not-relative
     1 check-is-dep
     1 check-project-relative
     1 identifiers
     1 environments."
     1 modules,
     1 templated
     1 `module/expand-path`.
     1 indicating
     1 how
     1 these
     1 paths.
     1 third
     1 element,
     1 specifying
     1 prevents
     1 `module/find`
     1 searching
     1 doesn't
     1 input
     1 often
     1 extension,
     1 period.
     1 `module/paths`
     1 behave
     1 types,
     1 relative
     1 imports
     1 imports.
     1 `ext`
     1 extension
     1 associate
     1 type,
     1 dot.
     1 `loader`
     1 `module/loaders`.
     1 [ext
     1 loader]
     1 [pre]
     1 pre
     1 check-dyn-relative]
     1 check-project-relative]
     1 ":sys:"
     1 ":sys:/:all:"
     1 check-is-dep]
     1 check-relative]
     1 ":native:"
     1 "/init.janet"
     1 ".janet"
     1 ".jimage"
     1 is-cached
     1 check-not-relative]
     1 Version
     1 works
     1 OS
     1 'os/stat
     1 :file
     1 os/stat
     1 :mode
     1 [err]
     1 path]
     1 :nil
     1 string/has-suffix?
     1 Try
     1 message.
     1 checker]
     1 checker
     1 [expander
     1 [[t
     1 _
     1 chk]]
     1 chk
     1 str-parts
     1 ;str-parts
     1 `A
     1 circular
     1 dependencies.`
     1 module/value
     1 `sym`.
     1 `private`
     1 resolve
     1 [module
     1 private]
     1 [v
     1 "An
     1 dot
     1 debugging."
     1 repl-based
     1 Optionally
     1 differentiate
     1 debuggers."
     1 [fiber
     1 level]
     1 :debug-level
     1 "debug["
     1 "]:"
     1 "entering
     1 "]
     1 exit"
     1 {:chunks
     1 nextenv}
     1 "exiting
     1 :resume-value
     1 "Create
     1 `run-context`'s
     1 abnormal
     1 signals
     1 `:debug`
     1 value."
     1 is-repl]
     1 is-repl
     1 x}
     1 path,
     1 resulting
     1 :env,
     1 :expander,
     1 :evaluator,
     1 :read,
     1 through
     1 underlying
     1 call.
     1 `exit`
     1 trigger
     1 parser]
     1 :core/file
     1 :core/stream
     1 4096
     1 b]
     1 names
     1 kinds
     1 modules.``
     1 @{:native
     1 native-loader
     1 source-loader
     1 preload-loader
     1 [m
     1 image-loader
     1 kargs]
     1 "circular
     1 dependency
     1 detected"
     1 "module
     1 unknown"
     1 require
     1 ``Require
     1 ``Merge
     1 `target`
     1 `prefix`,
     1 users
     1 emulate
     1 `export`
     1 merged
     1 marked
     1 private.
     1 environment.``
     1 [target
     1 export]
     1 @{:private
     1 export
     1 ``Function
     1 `import`.
     1 parameters,
     1 parameters
     1 {:as
     1 :export
     1 ep}
     1 string/split
     1 ep
     1 ``Import
     1 module.
     1 First
     1 requires
     1 module,
     1 merges
     1 prepending
     1 needed.
     1 option
     1 prefix.
     1 "`:export
     1 re-export
     1 "`:exit
     1 encountered
     1 called.
     1 Dynamic
     1 imported.
     1 bypass
     1 cache.``
     1 argm
     1 ;argm
     1 `import`,
     1 identifier.
     1 shot.``
     1 modules]
     1 |~
     1 ,import*
     1 Documentation
     1 [envi
     1 envi
     1 "Width
     1 columns
     1 `Reformat
     1 certain
     1 width.
     1 Docstrings
     1 plaintext
     1 subset
     1 markdown.
     1 long
     1 prose
     1 text
     1 well-formed
     1 docstring.
     1 text.`
     1 [str
     1 colorize]
     1 80
     1 8
     1 Terminal
     1 codes
     1 emission/tokenization
     1 ["\e[97m"
     1 "\e[39m"]
     1 ["\e[1m"
     1 "\e[22m"]}
     1 ["_"
     1 "_"]
     1 ["`"
     1 "`"]
     1 ["*"
     1 "*"]
     1 ["**"
     1 "**"]}
     1 indexes
     1 block.
     1 Traversal
     1 skip*
     1 advance
     1 cursor.
     1 [y
     1 Detection
     1 "0"
     1 "9"
     1 [c1
     1 cursor]
     1 c1
     1 helper
     1 parse-*
     1 nodes
     1 `stack`,
     1 indentation
     1 leave
     1 mutual
     1 [from
     1 to]
     1 [bullet-check
     1 @[initial]
     1 bullet-check
     1 [indent
     1 end]
     1 @[:cb
     1 token-length]
     1 `\`
     1 :underline
     1 Handle
     1 specially
     1 defn,
     1 defmacro,
     1 etc.
     1 "\e[97m"
     1 "\e[39m"
     1 [[
     1 [code
     1 [el
     1 [rep
     1 rep
     1 "*
     1 "%d.
     1 :cb
     1 [fltr]
     1 describe
     1 "Bindings:
     1 "Dynamics:
     1 :redef
     1 :var
     1 [[path
     1 sm]
     1 found.
     1 https://janet-lang.org/docs/specials.html
     1 doc*
     1 `doc`."
     1 '[break
     1 quasiquote
     1 quote
     1 splice
     1 unquote
     1 while]
     1 [mod-env
     1 {:module
     1 mod-env
     1 "symbol
     1 ``Shows
     1 bindings.
     1 lexical
     1 shown
     1 ,doc*
     1 ',sym
     1 doc-of
     1 `Searches
     1 out
     1 documentation.
     1 [module-set
     1 [[root-env]
     1 module/cache]
     1 module-set
     1 module]
     1 "documentation
     1 Debugger
     1 .stack
     1 stack."
     1 [*err-color*
     1 frame"
     1 debug/stack
     1 .locals
     1 :locals
     1 slots
     1 frame."
     1 .slot
     1 slot."
     1 frame-idx]
     1 frame-idx
     1 Conditional
     1 'disasm
     1 "Gets
     1 .ppasm
     1 "Pretty
     1 :sourcemap
     1 [-2
     1 -2]
     1 signal:
     1 status:
     1 function:
     1 :name
     1 "<anonymous>"
     1 ["
     1 [constants
     1 :constants
     1 constants:
     1 %.4q"
     1 constants
     1 slots:
     1 %.4q
     1 20
     1 [instr
     1 eprinf
     1 "%.20s"
     1 [[sl
     1 sc]
     1 [sl
     1 sc]]
     1 sl
     1 sc
     1 .breakall
     1 instructions
     1 .clearall
     1 .source
     1 .break
     1 pc."
     1 .nextc
     1 breakpoint,
     1 clearing
     1 .step
     1 "Execute
     1 instructions."
     1 debug/step
     1 repl.
     1 caught.
     1 in,
     1 read]
     1 :repl}
     1 Extras
     1 'ev/go
     1 net/close
     1 "Alias
     1 `ev/close`."
     1 [stream]
     1 ev/close
     1 asynchronously.
     1 scheduled
     1 _call
     1 ev/spawn
     1 _spawn
     1 ev/do-thread
     1 Suspends
     1 thread
     1 complete,
     1 _do-thread
     1 ev/spawn-thread
     1 Like
     1 `ev/do-thread`,
     1 immediately.``
     1 _spawn-thread
     1 :n
     1 ev/with-deadline
     1 deadline,
     1 complete
     1 deadline
     1 up,
     1 canceled.`
     1 [deadline
     1 ,ev/deadline
     1 ,deadline
     1 [fibers
     1 reason]
     1 ev/cancel
     1 reason
     1 wait-for-fibers
     1 fibers]
     1 "parent
     1 [sig
     1 fiber]
     1 ev/take
     1 chan
     1 sig
     1 :ok
     1 "sibling
     1 ev/gather
     1 parallel
     1 event
     1 join
     1 gathered
     1 fset
     1 ftemp]
     1 ,ev/chan
     1 [[i
     1 ,wait-for-fibers
     1 'net/listen
     1 net/server
     1 "Start
     1 asynchronously
     1 `net/listen`
     1 `net/accept-loop`.
     1 stream."
     1 [host
     1 type]
     1 net/listen
     1 host
     1 net/accept-loop
     1 FFI
     1 Extra
     1 "Lazily
     1 series
     1 expressions.
     1 once,
     1 memoizes
     1 result."
     1 ,;forms
     1 'ffi/native
     1 Current
     1 ffi/bind
     1 settings"
     1 ffi/context
     1 implictly
     1 bind,
     1 ease
     1 bindings."
     1 lazy]
     1 @{:native-path
     1 map-symbols}
     1 ffi/defbind
     1 "Generate
     1 convenient
     1 manner."
     1 meta
     1 formal-args
     1 type-args
     1 computed-type-args
     1 ~[,;type-args]
     1 {:native
     1 ms}
     1 found"
     1 ms
     1 ffi/signature
     1 :default
     1 ;computed-type-args
     1 ffi/lookup
     1 "failed
     1 Flychecking
     1 `Check
     1 effects,
     1 function.`
     1 [src]
     1 {'defn
     1 'varfn
     1 'defn-
     1 'defmacro
     1 'defmacro-
     1 'def-
     1 'var-
     1 'defglobal
     1 'varglobal
     1 is-safe-def}
     1 {'import
     1 'import*
     1 'dofile
     1 'require
     1 [evaluator
     1 ``An
     1 flychecks
     1 code.
     1 means
     1 compiled,
     1 run.
     1 `flycheck`.``
     1 [thunk
     1 "define-"
     1 Sometimes
     1 Always
     1 'use
     1 Import-like
     1 [[l
     1 ;source
     1 ``Check
     1 Found
     1 usual
     1 format.
     1 Macros
     1 still
     1 however,
     1 arbitrary
     1 execution
     1 possible.
     1 Other
     1 `dofile`.
     1 stdin.
     1 &keys
     1 kwargs]
     1 kwargs
     1 [e
     1 Tool
     1 Main
     1 conditional
     1 os
     1 'os/getenv
     1 arg]
     1 'main
     1 :y
     1 "Dynamic
     1 program
     1 start."
     1 ``Name
     1 interpreter
     1 executable
     1 program.
     1 Corresponds
     1 `argv[0]`
     1 `int
     1 int
     1 argc,
     1 **argv
     1 ;`.``
     1 profile
     1 starting
     1 cli-main
     1 `Entrance
     1 Janet
     1 tool.
     1 invoke
     1 interface.`
     1 [jp
     1 jp
     1 [jprofile
     1 "JANET_PROFILE"
     1 jprofile
     1 "NO_COLOR"
     1 Flag
     1 {"h"
     1 "usage:
     1 "janet"
     1 [options]
     1 args..."
     1 Options
     1 -h
     1 Show
     1 help
     1 -v
     1 -s
     1 raw
     1 functionality
     1 -e
     1 Execute
     1 -E
     1 arguments...
     1 -d
     1 debug
     1 -r
     1 Enter
     1 -R
     1 Disables
     1 JANET_PROFILE
     1 present
     1 -p
     1 executing
     1 top-level
     1 persistent
     1 -q
     1 Hide
     1 logo
     1 -k
     1 -m
     1 -c
     1 -i
     1 Load
     1 -n
     1 Disable
     1 -N
     1 Enable
     1 -l
     1 processing
     1 -w
     1 "normal"
     1 -x
     1 "none"
     1 Stop
     1 handling
     1 "v"
     1 "s"
     1 "r"
     1 "p"
     1 "q"
     1 "i"
     1 "k"
     1 "n"
     1 "N"
     1 "m"
     1 "c"
     1 c-switch
     1 "l"
     1 l-switch
     1 "e"
     1 e-switch
     1 "E"
     1 E-switch
     1 E-expression
     1 math/inf
     1 "d"
     1 "w"
     1 "x"
     1 "R"
     1 "unknown
     1 -"
     1 "h"
     1 Process
     1 :stdin
     1 "Janet
     1 os/which
     1 os/arch
     1 os/compiler
     1 help"
     1 [p]
     1 parser/where
     1 parser/state
     1 [prompt
     1 file/flush
     1 [profile.janet
     1 "%.20Q"
     1 "%.20q"
     1 Bootstrap
     1 Modify
     1 :no-docstrings
     1 :no-sourcemaps
     1 Fix
     1 separators
     1 non-windows
     1 [sm
     1 "\"
     1 'boot/config
     1 'boot/args
     1 dictionary
     1 [env-pairs
     1 abstract?
     1 env-pairs
     1 duplicate
     1 "duplicate
     1 value:
     1 amalgamation
     1 "src/core/features.h"
     1 ["src/core/state.h"
     1 "src/core/util.h"
     1 "src/core/gc.h"
     1 "src/core/vector.h"
     1 "src/core/fiber.h"
     1 "src/core/regalloc.h"
     1 "src/core/compile.h"
     1 "src/core/emit.h"
     1 "src/core/symcache.h"]
     1 ["src/core/abstract.c"
     1 "src/core/array.c"
     1 "src/core/asm.c"
     1 "src/core/buffer.c"
     1 "src/core/bytecode.c"
     1 "src/core/capi.c"
     1 "src/core/cfuns.c"
     1 "src/core/compile.c"
     1 "src/core/corelib.c"
     1 "src/core/debug.c"
     1 "src/core/emit.c"
     1 "src/core/ev.c"
     1 "src/core/ffi.c"
     1 "src/core/fiber.c"
     1 "src/core/gc.c"
     1 "src/core/inttypes.c"
     1 "src/core/io.c"
     1 "src/core/marsh.c"
     1 "src/core/math.c"
     1 "src/core/net.c"
     1 "src/core/os.c"
     1 "src/core/parse.c"
     1 "src/core/peg.c"
     1 "src/core/pp.c"
     1 "src/core/regalloc.c"
     1 "src/core/run.c"
     1 "src/core/specials.c"
     1 "src/core/state.c"
     1 "src/core/string.c"
     1 "src/core/strtod.c"
     1 "src/core/struct.c"
     1 "src/core/symcache.c"
     1 "src/core/table.c"
     1 "src/core/tuple.c"
     1 "src/core/util.c"
     1 "src/core/value.c"
     1 "src/core/vector.c"
     1 "src/core/vm.c"
     1 "src/core/wrap.c"]
     1 janet.c
     1 Amalgamated
     1 DO
     1 EDIT
     1 Generated
     1 "#define
     1 JANET_BUILD
     1 """
     1 ```#define
     1 JANET_AMALG```
     1 [fname]
     1 /*
     1 "#line
     1 ```#include
     1 "janet.h"```
     1 windows.h
     1 external
     1 internal
     1 headers
     1 .c
     1 files.
     1 Windows
     1 work
     1 around
     1 winsock2
     1 windows.h,
     1 especially
     1 amalgamated
     1 "#if
     1 JANET_WINDOWS
     1 &&
     1 JANET_NET
     1 "#include
     1 <winsock2.h>"
     1 "#endif"
     1 uint8_t
     1 buffer.
     1 compiled
     1 linked
     1 statically
     1 example
     1 client.
     1 "static
     1 const
     1 janet_core_image_bytes[]
     1 {"
     1 16
     1 prin
     1 prinf
     1 "0x%.2X,
     1 };
     1 "const
     1 *janet_core_image
     1 janet_core_image_bytes;"
     1 "size_t
     1 janet_core_image_size
     1 sizeof
     1 janet_core_image_bytes
     1 ;"
