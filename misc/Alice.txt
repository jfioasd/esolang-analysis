230 '/'
/ 	Mirror. Reflect the IP through 67.5 degrees, switch between modes. See section on mirrors for details. 	Mirror. Same as Cardinal.

195 '.'
. 	Duplicate. Pop n. Push n twice. 	Duplicate. Pop s. Push s twice.

148 '@'
@ 	End. Terminate the program. 	End. Terminate the program.

147 'o'
o 	Write byte. Pop n. Write its 8 least significant bits as a byte to the standard output stream. 	Write string. Pop s. Write it as a UTF-8-encoded string to the standard output stream.

129 '\\'
\ 	Mirror. Reflect the IP through -67.5 degrees, switch between modes. See section on mirrors for details. 	Mirror. Same as Cardinal.

109 ' '

103 '&'
& 	Repeat. Pop n. Add n to the iterator queue. 	Fold. Pop s. Add s to the iterator queue.

98 'i'
i 	Read byte. Read a single byte from the standard input stream and push it. Push -1 at EOF instead. 	Read all. Read the entire UTF-8-encoded standard input stream (until EOF is encountered) and push it as a single string.‡

72 '"'
" 	Toggle string mode. Only exiting string mode is considered a command, and pushes all the recorded integers to the stack. See the section on string mode for details. 	Toggle string mode. Only exiting string mode is considered a command, and pushes all recorded integers that are valid characters as a single string to the stack. See the section on string mode for details.

71 '!'
! 	Store. Pop n. Store it in the current tape cell. 	Store. Pop s. Store it as a word on the tape. In particular, store its characters on the tape, starting at the position of the tape head and going right. The cell right after the end of s gets set to -1 to ensure that there is a word terminator.

69 '?'
? 	Load. Push the value in the current tape cell to the stack. 	Load. Read a word from the tape cell by taking the longest run of characters from the position of the tape head to the right and push it to the stack.

67 'w'
w 	Push return address. Push the current IP address to the return address stack (without jumping anywhere). 	Push return address. Same as Cardinal.

61 "'"
' 	Escape. Pushes the value of the next grid cell to the stack.† 	Escape. If the next grid cell holds a valid character, that character is pushed to the stack. Otherwise, an empty string is pushed.†

61 'd'
d 	Depth. Push the number of elements currently in the stack (without popping or converting any of them). 	Join stack. Make a copy of each stack element, convert it to a string, join them all together (so that the top element is at the end) and push the result. This does not affect any of the existing stack elements.

60 'O'
O 	Write character. Pop n. If n is a valid character, write it to the standard output stream using UTF-8 encoding. 	Write line. Pop s. Write it as a UTF-8-encoded string to the standard output stream, followed by a linefeed (0x0A).

57 't'
t 	Decrement. Pop n. Push n-1. 	Tail. Pop s. Push the everything except the last character of s, then push the last character of s. If s == "", push "" twice.

57 '*'
* 	Multiply. Pop y. Pop x. Push x * y. 	Concatenate. Pop b. Pop a. Push the concatenation of a and b.

50 '-'
- 	Subtract. Pop y. Pop x. Push x - y. 	Remove. Pop b. Pop a. Remove all occurrences of b from a and push the result. If there are overlapping occurrences, the characters from all those occurrences will be removed (e.g. operands "abcbcbd" and "bcb" would yield "ad").

49 '$'
$ 	Skip if 0. Pop n. Act like # if n = 0, do nothing otherwise. 	Skip if empty. Pop s. Act like # if s = "", do nothing otherwise.

49 '~'
~ 	Swap. Pop y. Pop x. Push y. Push x. 	Swap. Pop b. Pop a. Push b. Push a.

48 'n'
n 	Logical Not. Pop y. Push 1 if y = 0, push 0 otherwise. 	Logical Not. Pop s. Push "Jabberwocky" if s = "", push "" otherwise.

48 '+'
+ 	Add. Pop y. Pop x. Push x + y. 	Superimpose. Pop b. Pop a. Add null characters to the end of the shorter string until they are the same length. Then form a new string by taking the character with the larger code point at each position, and push that string.

45 'I'
I 	Read character. Read a single UTF-8-encoded character from the standard input stream and push its code point. Push -1 at EOF instead.‡ 	Read line. Read one UTF-8-encoded line from the standard input stream (i.e. up to the first linefeed, 0x0A) and push it as a single string. The linefeed is consumed but not included in the resulting string.‡

44 'h'
h 	Increment. Pop n. Push n+1. 	Head. Pop s. Push the first character of s, then push the remainder of s. If s == "", push "" twice.

44 '2'

42 'e'
e 	Minus one. Push -1. 	Empty string. Push "".

41 ';'
; 	Discard. Pop one integer and discard it. 	Discard. Pop one string and discard it.

40 'R'
R 	Negate. Pop n. Push -n. 	Reverse. Pop s. Reverse s and push the result.

38 'a'
a 	Ten. Push 10. 	Linefeed. Push a single linefeed character (0x0A).

37 'r'
r 	Range. Pop n. If n ≥ 0, push all integers from 0 to n, inclusive. If n < 0, push all integers from -n to 0, inclusive. 	Range expansion. Pop s. First, reduce all consecutive runs of equal characters to a single copy of that character. Then, for each pair of adjacent characters a and b, insert all intermediate characters between them. Push the result. For example, "aebbfbbbda" becomes "abcdedcbcdefedcbcdcba".

35 'K'
K 	Raw return. Peek at the top of the return address stack and jump there.* 	Raw return. Same as Cardinal.

34 'k'
k 	Return. Pop an address from the return address stack and jump there.* 	Return. Same as Cardinal.

31 'q'
q 	Tape head. Push the current position of the tape head. 	Join tape. Join all words on the tape into a single string and push it.

28 '%'
% 	Modulo. Pop y. Pop x. Push x % y (modulo). The sign of the result matches the sign of y, such that (x / y) * y + x % y = x is guaranteed. Terminates the program with an error if y = 0. 	Split. Pop b. Pop a. Split a into chunks separated by occurrences of b and push those chunks.

28 '1'

24 ']'
] 	Move right. Move the tape head one cell to the right. 	Move right. Move the tape head one word to the right. Specifically, move the tape head right as long as the current cell holds a character (to move the tape head to the terminator of the current word). Then move it one more cell to the right (to move it onto the beginning of the next word).

23 '0'
0-9 	Digit. Pushes the corresponding digit to the stack. 	Digit. Pop s. Append the corresponding digit as a character to s and push the result.

23 'E'
E 	Power/Root. Pop y. Pop x. If y is non-negative, push xy. If x = y = 0, push 1. If y is negative and x is non-negative, this computes x1/-y, rounded towards negative infinity. If both x and y are negative, this computes -(-x)1/-y, rounded towards negative infinity. 	Riffle. Pop b. Pop a. Insert b between every pair of characters in a and push the result.

21 ':'
: 	Divide. Pop y. Pop x. Push x / y. Results are rounded towards negative infinity. Terminates the program with an error if y = 0. 	Occurrences. Pop b. Pop a. Push all non-overlapping occurrences of b in a (e.g. operands "abcbcbcbd" and "bcb" would push "bcb" only twice).

21 'l'
l 	Clear lower bits. Pop n. Set all of its bits except the most-significant bit to 0. Push the result. 	Lower case. Pop s. Convert letters in s to lower case. Whether and how this works for Unicode letters outside the ASCII range, and whether the user's locale is respected is implementation-defined.

20 'y'
y 	If-then-else. Pop z. Pop y. Pop x. Push the bitwise if-then-else of x, y and z. Specifically, push (x AND y) OR (NOT x AND z). 	Transliterate. Pop c. Pop b. Pop a. Transliterate a by mapping b to c and push the result. The details of this operation are somewhat involved and can be found in the footnote.¶

19 '#'
# 	Skip. Skip the next command. This is implemented by adding a 0 to the front of the iterator queue. 	Skip. Same as Cardinal. (Technically, this one uses "" as the iterator, but "" and 0 are functionally equivalent as iterators.)

18 '['
[ 	Move left. Move the tape head one cell to the left. 	Move left. Move the tape head one word to the left. Specifically, move the tape head left as long as that cell holds a character (to move the tape head to the beginning of the current word) — this part will usually be skipped. Then move it one more cell to the left (to move it onto the previous word terminator). Then move it left again as long as that cell holds a character (to move the tape head to the beginning of the previous word).

18 '<'
< 	Move west. Set the IP direction to west. 	Half-wall west. Set the horizontal component of the IP direction to west.

18 'z'
z 	Drop small factors. Pop y. Pop x. For each prime p less than or equal to y, divide x by p as long as possible and push the result. For y < 0 also uses negative primes p so that the sign of x is flipped for each removed prime factor. If x = 0, push 0. 	Drop. Pop b. Pop a. If a contains b as a substring, discard everything in a up to and including the first occurrence of b. Push a.

18 ','
, 	Rotate stack. Pop n. If n is positive, move the element which is n elements below the top to the top. If n is negative, move the top stack element down the stack by n positions. These operations do not pop and push elements and therefore don't convert any data types. 	Permute stack. Pop s. Use as a permutation to reorder the stack. This is done by aligning the string character-by-character with the stack elements, so that the last element corresponds to the top of the stack (and the first character corresponds to the nth element from the top, where n is the length of s). Then the string is sorted stably, while keeping each stack element paired with its corresponding character. Hence, the stack elements perform the reordering that is required to sort s. The reordered stack elements are not popped in the process, so this does not convert any data types.

17 'u'
u 	Set lower bits. Pop n. Set all of its bits except the most-significant bit to 1. Push the result. 	Upper case. Pop s. Convert letters in s to upper case. Whether and how this works for Unicode letters outside the ASCII range, and whether the user's locale is respected is implementation-defined.

16 '3'

16 'S'
S 	Replace divisor. Pop z. Pop y. Pop x. Determine how often y divides x, i.e. find the largest n for which yn divides x. Divide x by yn and then multiply it by zn. Push the result. There are several special cases: If x = 0, push 0. If y = z = ±1, push x. If y = ±1 and z = 0, push 0. In all other cases, where y = ±1, enter an infinite loop. 	Replace substring. Pop c. Pop b. Pop a. Replace each non-overlapping occurrence of b in a with c. Push the result.

16 '4'

15 'D'
D 	Deduplicate prime factors. Pop n. As long as p2 divides n for some prime p, divide n by p (that is, remove all "extraneous" copies of prime factors), and push the result. If n = 0, push 0. 	Deduplicate characters. Pop s. For each character, discard all but its first occurrence in s. Push the result.

15 'm'
m 	Floor. Pop y. Pop x. Push the greatest multiple of y which is not greater than x. 	Truncate. Pop b. Pop a. Remove characters from the end of the longer string until they have the same length. Push a. Push b.

13 'M'
M 	ARGC. Push the number of remaining command-line arguments.§ 	ARGV. Push the first unread command-line argument, or "" if all arguments have been read.§ The arguments are assumed to be encoded in UTF-8. Any bytes that do not form a valid UTF-8 character will be skipped.

13 'Z'
Z 	Pack. Pop y. Pop x. Map x and y (bijectively) to a single integer n. Push n. This is the inverse operation of Y. For details of the bijection, see the footnote.‖ 	Zip. Pop b. Pop a. Interleave a and b by taking characters from then in an alternating manner, starting with a. If one string is shorter than the other, the remaining characters of the other one are simply appended. For example a = "abc" and b = "012345" will yield "a0b1c2345". Push the result.

13 'Y'
Y 	Unpack. Pop n. Map n (bijectively) to two integers x and y. Push x. Push y. This is the inverse operation of Z. For details of the bijection, see the footnote.‖ 	Unzip. Pop s. Create two empty strings a and b. Append the characters from s to a and b in an alternating manner, starting with a. Push a. Push b.

12 'v'
v 	Move south. Set the IP direction to south. 	Half-wall south. Set the vertical component of the IP direction to south.

12 'W'
W 	Discard return address. Pop and discard the top of the return address stack. 	Discard return address. Same as Cardinal.

12 'A'
A 	And. Pop y. Pop x. Push the bitwise AND of x and y. 	Intersection. Pop b. Pop a. Compute the multiset intersection of a and b (accounting for multiplicities). Specifically, iterate through the characters of a and remove the leftmost copy of each character from b if it exists, and remove it from a otherwise. Push what remains of a.

12 'U'
U 	Random integer. Pop n. If n > 0, push a uniformly random integer in [0,n). If n < 0, push a uniformly random integer in (n,0]. If n = 0, push 0. 	Random choice. Pop s. Push a character chosen randomly with uniform distribution from s. If s contains duplicate characters, these will have a higher probability of being drawn. If s is the empty string, push the empty string again.

11 '>'
> 	Move east. Set the IP direction to east. 	Half-wall east. Set the horizontal component of the IP direction to east.

11 's'
s 	Sort swap. Pop y. Pop x. If x > y, swap x and y. Push x, push y. 	Sort. Pop s. Sort the characters in s. Push s.

11 'N'
N 	Not. Pop n. Push the bitwise NOT of n. Equivalent to -n-1. 	Complement. Pop b. Pop a. Compute the multiset complement of b in a, or alternatively the multiset difference b \ a (accounting for multiplicities). Specifically, iterate through the characters of b and remove the leftmost copy of each character from a if it exists. Push what remains of a.

11 'F'
F 	Divides. Pop y. Pop x. If y ≠ 0 and y divides x, push y. Otherwise, push 0. 	Contains. Pop b. Pop a. If a contains b as a substring, push b. Otherwise, push "".

11 'H'
H 	Abs. Pop n. Push |n|. 	Trim. Pop s. Remove all tabs (0x09), linefeeds (0x0A) and spaces (0x20) from both ends of the string.

10 'Q'
Q 	Convert. Pop n. Pop n values and push them again, so that their order remains the same. This can be used to force conversion of stack elements from the top such that there are at least n integers on top of the stack (as opposed to strings). 	Reverse stack. Pop all stack elements and push them again, so that their order is reversed. This also forces conversion to strings, although there are no cases where an explicit conversion to strings can change the behaviour of a program.

10 'g'
g 	Get cell. Pop y. Pop x. Get the value in the grid cell at (x,y) and push it. 	Get diagonal. Pop s. Scan the grid for the label s. If the label was found, start reading characters after the end of the label (along the same diagonal) until a non-character value is found. Push the string formed by those characters to the stack. See the section on labels for details.

10 '{'
{ 	Turn left. Rotate the IP direction left by 90 degrees. 	Turn left. Rotate the IP direction left by 90 degrees.

9 '6'

9 '}'
} 	Turn right. Rotate the IP direction right by 90 degrees. 	Turn right. Rotate the IP direction right by 90 degrees.

9 'C'
C 	Binomial. Pop k. Pop n. Push the binomial coefficient n-choose-k. Specifically, if n > 0 and k > n/2, replace k with n-k. Then if k < 0, push 0. If k = 0, push 1. If k > 0, multiply the numbers from n down to n-k+1 and divide them by the numbers from 1 to k. 	Subsequences. Pop s. Push all (not necessarily contiguous) subsequences of s from shortest to longest. Each subsequence should be thought of as a subset of the positions in s that are retained, while all others are dropped. The order of subsequences for a given length are such that the corresponding lists of retained positions would be canonically ordered.

8 '^'
^ 	Move north. Set the IP direction to north. 	Half-wall north. Set the vertical component of the IP direction to north.

8 'c'
c 	Prime factors. Pop n. Push the individual prime factors of n from smallest to largest (repeating each prime factor as necessary). Special cases: If n = 0, push 0. If n = 1, push nothing. If n < 0 push -1 followed by the result for -n. 	Characters. Pop s. Push the individual characters of s separately.

7 'B'
B 	Divisors. Pop n. Push all divisors of n, in order from smallest to largest. If n is negative, all divisors will be pushed negatively as well (still ordered by their absolute magnitude). If n = 0, push nothing. 	Substrings. Pop s. Push all non-empty contiguous substrings of s, from shortest to longest and from left to right.

7 'X'
X 	Xor. Pop y. Pop x. Push the bitwise XOR of x and y. 	Symmetric difference. Pop b. Pop a. Compute the symmetric multiset difference of a and b (accounting for multiplicities). Specifically, make a copy of b, called b', iterate through the characters of a and remove the leftmost copy of each character from b if it exists. Then iterate through b' and remove the leftmost copy of each character from a if it exists. Concatenate what remains of a and b and push the result.

7 'P'
P 	Factorial. Pop n. Push n!. For negative n, multiplies the numbers from n up to -1, so that we get (-n)! for even n and -(-n)! for odd n. 	Permutations. Pop s. Push all permutations of s, such that if each character was replaced by its index in s, the permutations would be canonically ordered. If s contains duplicate characters, there will be duplicate permutations.

7 '7'

7 'f'
f 	Prime-exponent pairs. Pop n. Push the prime factors of n as pairs of prime and exponent. Special cases: if n = 0, push 0, 1. If n = 1, push nothing. If n < 0, push -1, 1 followed by the result for -n. 	Runs. Pop s. Split s between any pair of different adjacent characters (or split s into runs of equal characters) and push the individual chunks. Do nothing if s is empty.

6 'x'
x 	Extract bit. Pop y. Pop x. Extract the yth bit from the binary representation of x. If y is negative, return the **(m+y+1)**th bit, where m is the position of the most significant bit of x. For x < -1, the most-significant bit is the most-significant zero. For x = -1, or x = 0, m = -1. And if -y > m+1, this returns 0. 	Permute string. Pop b. Pop a. Reorder a according to b, similar to the , command. This is done by aligning the strings character-by-character. If a is shorter than b, the last characters of b are paired with empty strings. If b is shorter than a, the remaining characters in a will be unaffected. Then b is sorted stably, while keeping each of its characters paired with the corresponding character from a. Then join the characters (and possibly empty strings) from a back together and push the result. Hence, the characters in a are reordered by the same permutation that would sort b.

6 '5'

6 '9'

6 'G'
G 	GCD. Pop y. Pop x. Push the greatest common divisor of x and y. If x = y = 0, push 0. The result is always non-negative. 	LCS. Pop b. Pop a. Push the longest substring that occurs in both a and b. If there are multiple common substrings of the maximal length, each such substring is pushed once (even if it appears multiple times), sorted by its first occurrence in a. Note that the empty string is always a common substring of a and b.

6 'T'
T 	Sleep. Pop n. Pause execution for n milliseconds. Does nothing if n is negative. 	Date and time. Push the current date and time in the format "YYYY-MM-DDTHH:MM:SS.mmm±AA:BB" where T is an actual "T" and ±AA:BB indicates the system's time zone.

5 '`'
` 	Debug. Special no-op: prints debug information to the standard error stream. 	Debug. Same as Cardinal.

4 '8'

4 'p'
p 	Put cell. Pop y. Pop x. Pop v. Set the value in the grid cell at (x,y) to v. 	Put diagonal. Pop s. Pop v. Scan the grid for the label s. If it is found, write v onto the grid, one character per cell, starting at the cell after the label (on the same diagonal). If v is longer than the remainder of the diagonal, this will write over the edge of the grid and thereby extend the bounding box of the grid. See the section on labels for details.

4 ')'
) 	Search right. Pop n. Search for n right of the tape head (excluding the current cell itself). If it is found, move the tape head to the nearest occurrence. Note that -1 can always be found in the infinite stretches of unwritten tape to either side of the modified part. 	Search right. Pop s. Search for a word containing s as a substring right of the currently pointed to word (excluding that word itself). If such a word is found, move the tape head to its beginning.

4 'J'
J 	Raw jump. Same as j, but does not push the current IP to the return address stack.* 	Raw jump. Same as j, but does not push the current IP to the return address stack.*

3 'L'
L 	LCM. Pop y. Pop x. Push the least common multiple of x and y. The result is always non-negative. 	SCS. Pop b. Pop a. Push the shortest possible string which starts with a and ends with b.

3 '='
= 	Sign junction. Pop n. Act like { if n is negative, like } if n is positive. Has no further effect if n = 0. 	Compare junction. Pop b. Pop a. Act like { if a < b, act like } if a > b. Has no further effect if a = b. Comparisons are based on the lexicographic ordering of the strings.

3 'b'
b 	Random swap. Pop y. Pop x. With 50% probability, swap x and y. Push x, push y. 	Shuffle. Pop s. Shuffle s with a uniform distribution of possible resulting strings. Push the result.

3 'j'
j 	Jump. Pop y. Pop x. Push the current IP address to the return address stack. Jump to (x,y).* 	Jump. Pop s. Search the grid for the label s. If the label is not found, do nothing. Otherwise, push the current IP address to the return address stack and jump to the last cell of the label. See the section on labels for details.*

2 '('
( 	Search left. Pop n. Search for n left of the tape head (excluding the current cell itself). If it is found, move the tape head to the nearest occurrence. Note that -1 can always be found in the infinite stretches of unwritten tape to either side of the modified part. 	Search left. Pop s. Search for a word containing s as a substring left of the currently pointed to word (excluding that word itself). If such a word is found, move the tape head to its beginning.

2 '|'
| 	Wall. Reflect the IP through 90 degrees. See section on walls for details. 	Wall. Same as Cardinal.

2 'ё'

2 'е'

1 '_'
_ 	Wall. Reflect the IP through 0 degrees. See section on walls for details. 	Wall. Same as Cardinal.
